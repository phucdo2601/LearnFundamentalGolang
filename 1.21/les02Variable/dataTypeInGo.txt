Go's basic variable types are:
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128

We talked about strings and ints previously, and those two types should be fairly self-explanatory. A bool is a boolean variable, meaning it has a value of true or false. The floating point types (float32 and float64) are used for numbers that are not integers -- that is, they have digits to the right of the decimal place, such as 3.14159. The float32 type uses 32 bits of precision, while the float64 type uses 64 bits to be able to more precisely store more digits. Don't worry too much about the intricacies of the other types for now. We will cover some of them in more detail as the course progresses.

DECLARING A VARIABLE
Variables are declared using the var keyword. For example, to declare a variable called number of type int, you would write:
    ex: var number int
To declare a variable called pi to be of type float64 with a value of 3.14159, you would write:
    ex: var pi float64 = 3.14159

------------------------------------------------------------------------------------------------------------------------
SHORT VARIABLE DECLARATION
Inside a function (even the main function), the := short assignment statement can be used in place of a var declaration. The := operator infers the type of the new variable based on the value.
    var empty string

Is the same as
    empty := ""

Ex:
    numCars := 10 // inferred to be an integer

    temperature := 0.0 // temperature is inferred to be a floating point value because it has a decimal point

    var isFunny = true // isFunny is inferred to be a boolean

------------------------------------------------------------------------------------------------------------------------
TYPE INFERENCE
To declare a variable without specifying an explicit type (either by using the := syntax or var = expression syntax), the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:
    var i int
    j := i // j is also an int

However, when the right hand side is a literal value (an untyped numeric constant like 42 or 3.14), the new variable will be an int, float64, or complex128 depending on its precision:
    i := 42           // int
    f := 3.14         // float64
    g := 0.867 + 0.5i // complex128

----------------------------------------------------------------------------------------------------------------------
SAME LINE DECLARATIONS
We can declare multiple variables on the same line:
    mileage, company := 80276, "Tesla"

    // is the same as

    mileage := 80276
    company := "Tesla"

---------------------------------------------------------------------------------------------------------------------
TYPE SIZES
Ints, uints, floats, and complex numbers all have type sizes.
    int  int8  int16  int32  int64 // whole numbers

    uint uint8 uint16 uint32 uint64 uintptr // positive whole numbers

    float32 float64 // decimal numbers

    complex64 complex128 // imaginary numbers (rare)

The size (8, 16, 32, 64, 128, etc) indicates how many bits in memory will be used to store the variable. The default int and uint types are just aliases that refer to their respective 32 or 64 bit sizes depending on the environment of the user.

The standard sizes that should be used unless the developer has a specific need are:

int
uint
float64
complex128
Some types can be converted the following way:
    temperatureFloat := 88.26
    temperatureInt := int64(temperatureFloat)
Casting a float to an integer in this way truncates the floating point portion.

------------------------------------------------------------------------------------------------------------------------
CONSTANTS
Constants are declared like variables but use the const keyword. Constants can't use the := short declaration syntax.

Constants can be character, string, boolean, or numeric values. They can not be more complex types like slices, maps and structs, which are types we will explain later.

As the name implies, the value of a constant can't be changed after it has been declared.
USE TWO SEPARATE CONSTANTS
Something weird is happening in this code.

What should be happening is that we create 2 separate constants: premiumPlanName and basicPlanName. Right now it looks like we're trying to overwrite one of them.

CONDITIONALS
if statements in Go don't use parentheses around the condition:
    if height > 4 {
        fmt.Println("You are tall enough!")
    }
else if and else are supported as you would expect:
    if height > 6 {
        fmt.Println("You are super tall!")
    } else if height > 4 {
        fmt.Println("You are tall enough!")
    } else {
        fmt.Println("You are not tall enough!")
    }

------------------------------------------------------------------------------------------------------------------------
THE INITIAL STATEMENT OF AN IF BLOCK
An if conditional can have an "initial" statement. The variable(s) created in the initial statement are only defined within the scope of the if body.
    if INITIAL_STATEMENT; CONDITION {
    }
WHY WOULD I USE THIS?
This is just some syntactic sugar that Go offers to shorten up code in some cases. For example, instead of writing:

    length := getLength(email)
    if length < 1 {
        fmt.Println("Email is invalid")
    }

We can do:
    if length := getLength(email); length < 1 {
        fmt.Println("Email is invalid")
    }
